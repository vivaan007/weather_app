{"version":3,"sources":["components/Titles.js","components/Form.js","components/WeatherParams.js","App.js","serviceWorker.js","index.js","config.js"],"names":["Titles","react_default","a","createElement","className","Form","props","onSubmit","getWeather","type","name","placeholder","WeatherParams","city","temperature","humidity","error","App","state","undefined","_callee","e","api_call","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","Config","API_KEY","sent","json","status","_this","setState","main","temp","stop","components_Titles","components_Form","this","components_WeatherParams","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.8e1dc12a.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Titles = () => (\n\t<div>\n\t\t<h1 className=\"title-container__title\">Weather App for Intuit</h1>\n\t\t<h3 className=\"title-container__subtitle\">Find out temperature and humidity of your city</h3>\n\t</div>\n);\n\nexport default Titles;","import React from \"react\";\n\nconst Form = props => (\n\t<form onSubmit={props.getWeather}>\n\t\t<input type=\"text\" name=\"city\" placeholder=\"Enter City\"/>\n\t\t<button>Get Weather</button>\n\t</form>\n);\n\nexport default Form;","import React from \"react\";\n\nconst WeatherParams = props => (\n\t<div className=\"weather__info\">\n\t {\t\n\t \tprops.city && <p className=\"weather__key\"> Location: \n\t \t\t<span className=\"weather__value\"> { props.city }</span>\n\t \t</p> \n\t }\n\t { \t\n\t \tprops.temperature && <p className=\"weather__key\"> Temperature: \n\t \t\t<span className=\"weather__value\"> { props.temperature + \"Â°C\"}\t</span>\n\t \t</p> \n\t }\n\t { \t\n\t \tprops.humidity && <p className=\"weather__key\"> Humidity: \n\t \t\t<span className=\"weather__value\"> { props.humidity + \"%\"} </span>\n\t \t</p> \n\t }\n\t { \n\t \tprops.error && <p className=\"weather__error\">{ props.error }</p>  \n\t }\n\t</div>\n);\n\nexport default WeatherParams;","import React from 'react';\nimport Titles from \"./components/Titles\";\nimport Form from \"./components/Form\";\nimport WeatherParams from \"./components/WeatherParams\";\nimport Config from \"./config.js\"\n\n//const API_KEY = \"09978ae0f6c7d0fe485f99f94f7cd86c\";\n\nclass App extends React.Component {\n  state = {\n    temperature: undefined,\n    city: undefined,\n    humidity: undefined,\n    error: undefined\n  }\n  getWeather = async (e) => {\n    e.preventDefault();\n    const city = e.target.elements.city.value;\n    const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${Config.API_KEY}&units=metric`);\n    const data = await api_call.json();\n    \n    if ( city ) {\n      if ( api_call.status === '404') {\n        this.setState({\n          temperature: undefined,\n          city: undefined,\n          humidity: undefined,\n          error: \"Please enter a valid city.\"\n        });\n      }\n      else {\n        this.setState({\n          temperature: data.main.temp,\n          city: data.name,\n          humidity: data.main.humidity,\n          error: \"\"\n        });\n      }\n    } else {\n      this.setState({\n        temperature: undefined,\n        city: undefined,\n        humidity: undefined,\n        error: \"Please enter value for city.\"\n      });\n    }\n  }\n  \n  render() {\n    return (\n      <div>\n        <div className=\"wrapper\">\n          <div className=\"main\">\n            <div className=\"container\">\n              <div className=\"row\">\n                <div className=\"col-xs-5 title-container\">\n                  <Titles />\n                </div>\n                <div className=\"col-xs-5 form-container\">\n                  <Form getWeather={this.getWeather} />\n                  <WeatherParams \n                    temperature={this.state.temperature} \n                    humidity={this.state.humidity}\n                    city={this.state.city}\n                    error={this.state.error}\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"./App.css\";\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","var Config = {\n    API_KEY: \"09978ae0f6c7d0fe485f99f94f7cd86c\"\n}\nmodule.exports = Config;"],"sourceRoot":""}